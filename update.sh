#!/bin/bash

##############################################################################
# XUI-Manager Update Script
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ XUI-Manager –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
##############################################################################

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo ""
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë${NC}  $1"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then
    print_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
    exit 1
fi

print_header "XUI-Manager - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"

INSTALL_DIR="/opt/xui-manager"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
if [ ! -d "$INSTALL_DIR" ]; then
    print_error "XUI-Manager –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $INSTALL_DIR"
    print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ install.sh –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    exit 1
fi

cd "$INSTALL_DIR"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if [ ! -d ".git" ]; then
    print_error "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    print_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: cd /opt/xui-manager && git init && git remote add origin YOUR_REPO_URL"
    exit 1
fi

# 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print_info "–®–∞–≥ 1/6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é .env
if [ -f ".env" ]; then
    cp .env .env.backup
    print_success ".env —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
fi

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î (–µ—Å–ª–∏ –µ—Å—Ç—å)
if [ -f "/etc/x-ui/x-ui.db" ]; then
    cp /etc/x-ui/x-ui.db "/etc/x-ui/x-ui.db.backup-$(date +%Y%m%d-%H%M%S)"
    print_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î —Å–æ–∑–¥–∞–Ω–∞"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
print_info "–®–∞–≥ 2/6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."

if [ -n "$(git status --porcelain)" ]; then
    print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    git status --short
    echo ""
    read -p "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git stash save "Auto-stash before update $(date +%Y-%m-%d_%H:%M:%S)"
        print_success "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stash"
        STASHED=true
    fi
fi

# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
print_info "–®–∞–≥ 3/6: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

git fetch origin

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
print_info "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $CURRENT_BRANCH"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
LOCAL=$(git rev-parse HEAD)
REMOTE=$(git rev-parse origin/$CURRENT_BRANCH)

if [ "$LOCAL" = "$REMOTE" ]; then
    print_success "–£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è"

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ stash –µ—Å–ª–∏ –±—ã–ª
    if [ "$STASHED" = true ]; then
        print_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
        git stash pop
    fi

    exit 0
else
    print_info "–ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º..."
    git pull origin "$CURRENT_BRANCH"
    print_success "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
fi

# 4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print_info "–®–∞–≥ 4/6: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

if [ -f ".env.backup" ]; then
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º .env.example —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º .env
    if [ -f ".env.example" ]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env.example
        NEW_PARAMS=$(comm -13 <(grep -v '^#' .env.backup | grep '=' | cut -d'=' -f1 | sort) \
                              <(grep -v '^#' .env.example | grep '=' | cut -d'=' -f1 | sort))

        if [ -n "$NEW_PARAMS" ]; then
            print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
            echo "$NEW_PARAMS"
            print_info "–î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ .env..."

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            echo "" >> .env.backup
            echo "# New parameters added during update" >> .env.backup
            while IFS= read -r param; do
                grep "^$param=" .env.example >> .env.backup
            done <<< "$NEW_PARAMS"
        fi
    fi

    mv .env.backup .env
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
fi

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ stash –µ—Å–ª–∏ –±—ã–ª
if [ "$STASHED" = true ]; then
    print_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
    if git stash pop; then
        print_success "–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_warning "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        print_info "–†–∞–∑—Ä–µ—à–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä—É—á–Ω—É—é: git status"
    fi
fi

# 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print_info "–®–∞–≥ 5/6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

pip3 install -q --upgrade fastapi uvicorn pydantic python-multipart pydantic-settings

print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"

# 6. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
print_info "–®–∞–≥ 6/6: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."

systemctl restart xui-manager

sleep 2

if systemctl is-active --quiet xui-manager; then
    print_success "–°–µ—Ä–≤–∏—Å xui-manager –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
else
    print_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u xui-manager -n 50"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
API_RESPONSE=$(curl -s http://localhost:8888/api/health || echo "{}")

if echo "$API_RESPONSE" | grep -q "healthy"; then
    print_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    print_warning "API –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f /var/log/xui-manager.log"
fi

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print_header "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

echo -e "${GREEN}‚úÖ XUI-Manager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!${NC}"
echo ""
echo -e "${BLUE}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏:${NC}"
echo ""
echo -e "  ‚Ä¢ –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: ${GREEN}$(git rev-parse --short HEAD)${NC}"
echo -e "  ‚Ä¢ –í–µ—Ç–∫–∞: ${GREEN}$CURRENT_BRANCH${NC}"
echo -e "  ‚Ä¢ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${GREEN}$(date '+%Y-%m-%d %H:%M:%S')${NC}"
echo ""
echo -e "${BLUE}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo ""
echo -e "  ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:   ${YELLOW}tail -f /var/log/xui-manager.log${NC}"
echo -e "  ‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:   ${YELLOW}systemctl status xui-manager${NC}"
echo -e "  ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${YELLOW}git log --oneline -10${NC}"
echo ""

print_success "–ì–æ—Ç–æ–≤–æ! üéâ"
